@using static CascadingParametersApp.Models


@code {
    private ThemeSettings theme = new ThemeSettings
    {
        PrimaryColor = "#3498db",
        IsDarkMode = false
    };

    private UserInfo user = new UserInfo
    {
        Username = "Kenneth",
        Role = "Admin"
    };

    private string[] permissions;

    protected override void OnInitialized()
    {
        UpdatePermissions();
    }

    private void UpdatePermissions()
    {
        permissions = user.Role switch
        {
            "Admin" => new[] { "Read", "Write", "Delete", "Configure", "Do practical jokes on Editor" },
            "Editor" => new[] { "Read", "Write", "Edit" },
            _ => new[] { "Read" } // Default permissions for basic users
        };
    }

    private void ChangeRole()
    {
        user.Role = user.Role switch
        {
            "Admin" => "Editor",
            "Editor" => "User",
            _ => "Admin"
        };
        UpdatePermissions();
    }


    // This method will update the theme when called
    private void UpdateTheme(bool isDarkmode)
    {
        theme.IsDarkMode = isDarkmode;
        theme.PrimaryColor = isDarkmode ? "#333" : "#3498db";
    }

    public void UpdateState()
    {
        StateHasChanged();
    }

}

<div style="padding: 1em; background-color: @theme.PrimaryColor; color: white;">
    <h3>Parent Component</h3>
    <p>Welcome, @user.Username!</p>

    <CascadingValue Value="@theme">
        <CascadingValue Value="@user">
            <CascadingValue Value="@permissions">
                <ChildComponent OnThemeToggle="UpdateTheme" OnUpdatestate="UpdateState" OnRoleChange="ChangeRole" />
                <RoleBasedContent />
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</div>

